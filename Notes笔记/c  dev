交互：输入和输出  


//----------------- C代码 到可执行文件的过程 
预处理器(cpp)---hello.i-----hello.s(汇编)(任何语言C ,Fotran经过翻译器后都是一样的汇编)------
-----汇编阶段(翻译成机器指令)-------hello.o(可重定目标程序)---链接阶段（将多个可重定位目标文件合并成一个可执行文件）
-------------

ELF文件的头部数据包含了： 
1. 生成该文件的系统的字的大小和字节顺序。 
2. 帮助链接器语法分析和解释目标文件信息的数据。ELF文件中包含的数据可分成几个节，每个节的位置和大小是由节头部表描述的： 
//
1. text 机器代码 
2. rodata 只读数据，比如双引号括起的字符串等。 
3. data 已初始化的全局变量。 
4. bss 未初始化的全局变量。在ELF文件中它只是占位符，在目标文件中不占据实际的空间。 
5. symtab 一个符号表，存放在程序中定义和引用的函数和全局变量的信息。 
6. rel.text 一个.text节中位置的列表，当链接器进行链接时，需要修改这些位置。 
7. rel.data 被引用或定义的全局变量的重定位信息，依赖于其它模块信息的已初始化的全局变量，其值在链接时需要被修改。 
8. debug 调试符号表。 
9. line 机器代码与源文件行号的对应关系，只有在-g选项时才会产生。 
10. .strtab 一个字符串表，包括.symtab和.debug中的符号表，以及每个节的名字。
--------------------- 
作者：雷建方 
来源：CSDN 
原文：https://blog.csdn.net/u012184539/article/details/81348529 
版权声明：本文为博主原创文章，转载请附上博文链接！
header guard
#inndef  xx_yy_zz
#define  xx_yy_zz
#endif



计算机组成原理
osInitCtxSw() 调用任务切换

alu  只有 加法和左移                       

 在linux系统中，
// ----二进制信号量（binary semaphore）又称互斥锁（Mutex）,
 计数信号量 
 P1进入临界区,信号量减一变成0 ,P2必须等待P1离开临界区 ， 信号量再次变成1时, P2才可进入临界区 

一种机制：时钟中断 
c  dev

内存四区基本原理 

栈区，堆区，全局区 （静态区），常量区，程序代码区

线程的物种状态:这5种状态是休眠态， 就绪态、 运行态、 挂起态(awating)(等待某一事件发生)和被中断态（参见下图）   休眠态相当于该任务驻留在内存中，

数组  int[]  a[10]实际上就是 int型指针，共10块区域  
//-------------------------------------
2017版   服务器开发 liux 基础编程

终端输入命令 --->  搜索环境变量(路径)--->找到输入的命令，运行程序

UNIX   shell
linux   bash    bourne-again-shell 

//-------------------
linux  系统编程 

程序  剧本() 

进程  剧本在多个舞台同时进行

	单道程序设计模式  DOS 只有一个CPU，排队执行 
	多道程序设计  时间片轮转


















